openapi: 3.0.0
info:
  title: PDFreactor Web Service REST API
  description: This is the REST API definition and documentation of the PDFreactor Web Service.
  termsOfService: https://www.pdfreactor.com
  contact:
    name: PDFreactor Support Team
    email: support@realobjects.com
    url: http://www.pdfreactor.com
  license:
    name: PDFreactor Software License Agreement
    url: https://www.pdfreactor.com
  x-logo:
    url: https://www.realobjects.com/wp-content/uploads/images/logos/prlogo-180x180.png
    altText: PDFreactor Logo
  version: 10.1.10722.9

servers:
  - url: http://localhost:9423/service/rest
  - url: https://cloud.pdfreactor.com/service/rest
paths:
  /convert:
    post:
      description: Converts the posted configuration or asset package into PDF or image and returns the generated PDF or image.
      summary: Convert synchronously
      parameters:
        - &apiKeyParam
          in: query
          name: apiKey
          schema:
            type: string
          description: >
            The API key to authenticate the request (only necessary if the server is appropriately configured).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configuration'
          application/xml:
            schema:
              $ref: '#/components/schemas/Configuration'
      responses:
        '200':
          description: Conversion successful
          content: &responseResult
            application/json:
              schema: 
                $ref: '#/components/schemas/Result'
            application/xml:
              schema:
                $ref: '#/components/schemas/Result'
            application/pdf:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary
            text/plain:
              schema:
                type: string
                format: base64
        '400': &response400
          description: >
            Multiple reasons:
            (1) No input document was specified in the configuration.
            (2) The supplied configuration was not valid for some reason. See the error message for details.
            (3) The version of the client that was used is outdated and no longer supported. This is only available for the PDFreactor REST wrapper clients.
          content: &responseResultError
            application/json:
              schema: 
                $ref: '#/components/schemas/Result'
            application/xml:
              schema:
                $ref: '#/components/schemas/Result'
            '*/*':
              schema:
                type: string
        '401': &response401
          description: &response401desc The client failed an authorization check, e.g. because a supplied API key was invalid.
          content: *responseResultError
        '422': &response422
          description: The supplied configuration was accepted by PDFreactor but could not be converted for some reason. See the error message for details.
          content: *responseResultError
        '500': &response500
          description: &response500desc >
            Multiple reasons:
            (1) No configuration was supplied to the operation.
            (2) The configuration could not be processed and should be re-checked.
            (3) The supplied configuration is valid, however the conversion could not be completed for some reason. See the error message for details.
          content: *responseResultError
        '503': &response503
          description: &response503desc The PDFreactor Web Service is running and reachable, but conversions are unavailable.
          content: *responseResultError
  /convert/async:
    post:
      description: Converts the posted configuration or asset package into PDF or image. This operation responds immediately and does not wait for the conversion to finish. This is especially useful for very large or complex documents where the conversion will take some time.
      summary: Convert asynchronously
      parameters:
        - *apiKeyParam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configuration'
          application/xml:
            schema:
              $ref: '#/components/schemas/Configuration'
      responses:
        '202':
          description: Conversion successful started
          headers:
            Location:
              description: The relative URL where the progress of the conversion can be polled.
              schema:
                type: string
                format: url
        '400': *response400
        '401': *response401
        '422': *response422
        '500': *response500
        '503':
          description: The PDFreactor Web Service is running and reachable, but asynchronous conversions are unavailable.
          content: *responseResultError
  /progress/{id}:
    get:
      description: Retrieves progress information about the asynchronous conversion with the given ID.
      summary: Retrieve progress for async conversion
      parameters:
        - &documentIdParam
          in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the document.
        - *apiKeyParam
      responses:
        '200':
          description: The current estimated progress, including log output.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Progress'
            application/xml:
              schema: 
                $ref: '#/components/schemas/Progress'
        '201':
          description: The conversion is finished and the result can be accessed via the URL indicated in the 'Location' header.
          headers:
            Location:
              description: The location where the document can be downloaded.
              schema:
                type: string
                format: url
        '401': *response401
        '404': &response404
          description: Conversion does not exist.
          content: *responseResultError
        '500': *response500
        '503': *response503
  /document/{id}:
    get:
      description: Retrieves the asynchronously converted document with the given ID.
      summary: Retrieve converted document
      parameters:
        - *documentIdParam
        - *apiKeyParam
      responses:
        '200':
          description: The document was found and the conversion has finished.
          content: *responseResult
        '400': *response400
        '401': *response401
        '404': *response404
        '422': *response422
        '500': *response500
        '503': *response503
    delete:
      description: Deletes the asynchronously converted document with the given ID. If the conversion is still running, it gets terminated.
      summary: Delete converted document or terminate its conversion
      parameters:
        - *documentIdParam
        - *apiKeyParam
      responses:
        '204':
          description: A message indicating that the document has been successfully deleted.
        '401': *response401
        '404': *response404
        '500': *response500
        '503': *response503
  /document/metadata/{id}:
    get:
      description: Retrieves the metadata of the asynchronously converted document with the given ID.
      summary: Retrieve metadata of converted document
      parameters:
        - *documentIdParam
        - *apiKeyParam
      responses:
        '200':
          description: The document's metadata only, meaning the properties 'document' and 'documentArray' will me missing.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Result'
            application/xml:
              schema:
                $ref: '#/components/schemas/Result'
        '401': *response401
        '404': *response404
        '500': *response500
        '503': *response503  
  /document/{id}/{page}:
    get:
      description: Retrieves the specified page of the asynchronously converted multi-page image with the specified ID. This operation only functions when converting into image types, not PDF. Additionally, the configuration option "multiPage" has to be set to "true", otherwise there are no multiple pages.
      summary: Retrieve page of converted multi-page image
      parameters:
        - *documentIdParam
        - &pageParam
          in: path
          name: page
          schema:
            type: integer
            minimum: 1
          required: true
          description: The page number.
        - *apiKeyParam
      responses:
        '200':
          description: A page of the converted document.
          content: &responseImage
            image/bmp:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/tiff:
              schema:
                type: string
                format: binary
        '401': *response401
        '404': *response404
        '500': *response500
        '503': *response503 
  /document/{id}/show/{filename}:
    get:
      description: Displays the asynchronously converted document in the browser. When downloading the document, browsers will save it under the specified filename.
      summary: Display converted document in browser
      parameters:
        - *documentIdParam
        - &filenameParam
          in: path
          name: filename
          schema:
            type: string
          required: true
          description: The desired file name including the file extension.
        - *apiKeyParam
      responses:
        '200':
          description: The converted document.
          content: &responseFile
            application/pdf:
              schema:
                type: string
                format: binary
            image/bmp:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/tiff:
              schema:
                type: string
                format: binary
            text/plain:
              schema:
                type: string
                format: base64
        '401': *response401
        '404': *response404
        '500': *response500
        '503': *response503 
  /document/{id}/{page}/show/{filename}:
    get:
      description: Displays the specified page of the asynchronously converted multi-page image in the browser. When downloading the document, browsers will save it under the specified filename.
      summary: Display page of multi-page image in browser
      parameters:
        - *documentIdParam
        - *pageParam
        - *filenameParam
        - *apiKeyParam
      responses:
        '200':
          description: The converted document.
          content: *responseFile
        '401': *response401
        '404': *response404
        '500': *response500
        '503': *response503
  /document/{id}/download/{filename}:
    get:
      description: Downloads the asynchronously converted document in the browser. The download is triggered by an appropriate "Content-Disposition" header. When downloading the document, browsers will save it under the specified filename.
      summary: Download converted document in browser
      parameters:
        - *documentIdParam
        - *filenameParam
        - *apiKeyParam
      responses:
        '200':
          description: The converted document.
          content: *responseFile
        '401': *response401
        '404': *response404
        '500': *response500
        '503': *response503 
  /document/{id}/{page}/download/{filename}:
    get:
      description: Downloads the specified page of the asynchronously converted multi-page image in the browser. The download is triggered by an appropriate "Content-Disposition" header. When downloading the document, browsers will save it under the specified filename.
      summary: Download page of multi-page image in browser
      parameters:
        - *documentIdParam
        - *pageParam
        - *filenameParam
        - *apiKeyParam
      responses:
        '200':
          description: The converted document.
          content: *responseImage
          headers:
            Content-Disposition:
              description: A header to trigger a download in the browser.
              schema:
                type: string
        '401': *response401
        '404': *response404
        '500': *response500
        '503': *response503
  /version:
    get:
      description: Returns the version of the PDFreactor Web Service that is currently running.
      summary: Version of the PDFreactor Web Service
      parameters:
        - *apiKeyParam
      responses:
        '200':
          description: The version.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Version'
            application/xml:
              schema:
                $ref: '#/components/schemas/Version'
            text/plain:
              schema:
                type: string
        '401': &response401plain
          description: *response401desc
          content:
            text/plain:
              schema:
                type: string
        '500': &response500plain
          description: *response500desc
          content:
            text/plain:
              schema:
                type: string
        '503':
          description: *response503desc
          content:
            text/plain:
              schema:
                type: string
  /status:
    get:
      description: Checks if the PDFreactor Web Service is available and functional.
      summary: Healthcheck
      parameters:
        - *apiKeyParam
      responses:
        '200':
          description: The service is available and functional.
          content:
            text/plain:
              schema:
                type: string
        '401': *response401plain
        '500': *response500plain
        '503':
          description: The service is not functional.
          content:
            text/plain:
              schema:
                type: string
components:
  schemas: 
    AddressType:
      type: string
      enum:
        - LINK_LOCAL
        - LOCAL
        - PRIVATE
        - PUBLIC
    CallbackType:
      type: string
      enum:
        - FINISH
        - PROGRESS
        - START
    Cleanup:
      type: string
      enum:
        - CYBERNEKO
        - JTIDY
        - NONE
        - TAGSOUP
    ColorSpace:
      type: string
      enum:
        - CMYK
        - RGB
    Conformance:
      type: string
      enum:
        - PDF
        - PDFA1A
        - PDFA1A_PDFUA1
        - PDFA1B
        - PDFA2A
        - PDFA2A_PDFUA1
        - PDFA2B
        - PDFA2U
        - PDFA3A
        - PDFA3A_PDFUA1
        - PDFA3B
        - PDFA3U
        - PDFUA1
        - PDFX1A_2001
        - PDFX1A_2003
        - PDFX3_2002
        - PDFX3_2003
        - PDFX4
        - PDFX4P
    ConnectionRuleAction:
      type: string
      enum:
        - ALLOW
        - DENY
    ContentType:
      type: string
      enum:
        - BINARY
        - BMP
        - GIF
        - HTML
        - JPEG
        - JSON
        - NONE
        - PDF
        - PNG
        - TEXT
        - TIFF
        - XML
    CssPropertySupport:
      type: string
      enum:
        - ALL
        - HTML
        - HTML_THIRD_PARTY
        - HTML_THIRD_PARTY_LENIENT
    Doctype:
      type: string
      enum:
        - AUTODETECT
        - HTML5
        - XHTML
        - XML
    Encryption:
      type: string
      enum:
        - NONE
        - TYPE_128
        - TYPE_40
    ErrorPolicy:
      type: string
      enum:
        - LICENSE
        - MISSING_RESOURCE
    ExceedingContentAgainst:
      type: string
      enum:
        - NONE
        - PAGE_BORDERS
        - PAGE_CONTENT
        - PARENT
    ExceedingContentAnalyze:
      type: string
      enum:
        - CONTENT
        - CONTENT_AND_BOXES
        - CONTENT_AND_STATIC_BOXES
        - NONE
    HttpsMode:
      type: string
      enum:
        - LENIENT
        - STRICT
    JavaScriptDebugMode:
      type: string
      enum:
        - EXCEPTIONS
        - FUNCTIONS
        - LINES
        - NONE
        - POSITIONS
    JavaScriptMode:
      type: string
      enum:
        - DISABLED
        - ENABLED
        - ENABLED_NO_LAYOUT
        - ENABLED_REAL_TIME
        - ENABLED_TIME_LAPSE
    KeystoreType:
      type: string
      enum:
        - JKS
        - PKCS12
    LogLevel:
      type: string
      enum:
        - DEBUG
        - FATAL
        - INFO
        - NONE
        - PERFORMANCE
        - WARN
    MediaFeature:
      type: string
      enum:
        - ASPECT_RATIO
        - COLOR
        - COLOR_INDEX
        - DEVICE_ASPECT_RATIO
        - DEVICE_HEIGHT
        - DEVICE_WIDTH
        - GRID
        - HEIGHT
        - MONOCHROME
        - ORIENTATION
        - RESOLUTION
        - WIDTH
    MergeMode:
      type: string
      enum:
        - APPEND
        - ARRANGE
        - OVERLAY
        - OVERLAY_BELOW
        - PREPEND
    OutputIntentDefaultProfile:
      type: string
      enum:
        - FOGRA39
        - GRACOL
        - IFRA
        - JAPAN
        - JAPAN_NEWSPAPER
        - JAPAN_UNCOATED
        - JAPAN_WEB
        - SWOP
        - SWOP_3
    OutputType:
      type: string
      enum:
        - BMP
        - GIF
        - JPEG
        - PDF
        - PNG
        - PNG_AI
        - PNG_TRANSPARENT
        - PNG_TRANSPARENT_AI
        - TIFF_CCITT_1D
        - TIFF_CCITT_GROUP_3
        - TIFF_CCITT_GROUP_4
        - TIFF_LZW
        - TIFF_PACKBITS
        - TIFF_UNCOMPRESSED
    OverlayRepeat:
      type: string
      enum:
        - ALL_PAGES
        - LAST_PAGE
        - NONE
        - TRIM
    PageOrder:
      type: string
      enum:
        - BOOKLET
        - BOOKLET_RTL
        - EVEN
        - ODD
        - REVERSE
    PagesPerSheetDirection:
      type: string
      enum:
        - DOWN_LEFT
        - DOWN_RIGHT
        - LEFT_DOWN
        - LEFT_UP
        - RIGHT_DOWN
        - RIGHT_UP
        - UP_LEFT
        - UP_RIGHT
    PdfScriptTriggerEvent:
      type: string
      enum:
        - AFTER_PRINT
        - AFTER_SAVE
        - BEFORE_PRINT
        - BEFORE_SAVE
        - CLOSE
        - OPEN
    ProcessingPreferences:
      type: string
      enum:
        - SAVE_MEMORY_IMAGES
    QuirksMode:
      type: string
      enum:
        - DETECT
        - QUIRKS
        - STANDARDS
    ResourceType:
      type: string
      enum:
        - ATTACHMENT
        - FONT
        - ICC_PROFILE
        - IFRAME
        - IMAGE
        - MERGE_DOCUMENT
        - OBJECT
        - RUNNING_DOCUMENT
        - SCRIPT
        - STYLESHEET
        - UNKNOWN
    SigningMode:
      type: string
      enum:
        - SELF_SIGNED
        - VERISIGN_SIGNED
        - WINCER_SIGNED
    ViewerPreferences:
      type: string
      enum:
        - CENTER_WINDOW
        - DIRECTION_L2R
        - DIRECTION_R2L
        - DISPLAY_DOC_TITLE
        - DUPLEX_FLIP_LONG_EDGE
        - DUPLEX_FLIP_SHORT_EDGE
        - DUPLEX_SIMPLEX
        - FIT_WINDOW
        - HIDE_MENUBAR
        - HIDE_TOOLBAR
        - HIDE_WINDOW_UI
        - NON_FULLSCREEN_PAGE_MODE_USE_NONE
        - NON_FULLSCREEN_PAGE_MODE_USE_OC
        - NON_FULLSCREEN_PAGE_MODE_USE_OUTLINES
        - NON_FULLSCREEN_PAGE_MODE_USE_THUMBS
        - PAGE_LAYOUT_ONE_COLUMN
        - PAGE_LAYOUT_SINGLE_PAGE
        - PAGE_LAYOUT_TWO_COLUMN_LEFT
        - PAGE_LAYOUT_TWO_COLUMN_RIGHT
        - PAGE_LAYOUT_TWO_PAGE_LEFT
        - PAGE_LAYOUT_TWO_PAGE_RIGHT
        - PAGE_MODE_FULLSCREEN
        - PAGE_MODE_USE_ATTACHMENTS
        - PAGE_MODE_USE_NONE
        - PAGE_MODE_USE_OC
        - PAGE_MODE_USE_OUTLINES
        - PAGE_MODE_USE_THUMBS
        - PICKTRAYBYPDFSIZE_FALSE
        - PICKTRAYBYPDFSIZE_TRUE
        - PRINTSCALING_APPDEFAULT
        - PRINTSCALING_NONE
    XmpPriority:
      type: string
      enum:
        - HIGH
        - LOW
        - NONE
    Attachment:
      properties:
        data:
          type: string
          format: base64
          description: >
            <p>The binary content of the attachment. May be <code><span class='null'>null</span></code>.</p>
        description:
          type: string
          description: >
            <p>The description of the attachment. If this is not set or <code><span class='null'>null</span></code> the value of <code>name</code> is used.</p>
        name:
          type: string
          description: >
            <p>The file name associated with the attachment. It is recommended to specify the correct file extension. If this is not set or <code><span class='null'>null</span></code> the name is derived from <code>url</code>.</p>
        url:
          type: string
          format: url
          description: >
            <p>If <code>data</code> is not set or set to <code><span class='null'>null</span></code>, the attachment will be retrieved from this URL.</p> <p>If this is "#" the input document URL is used instead.</p>
    BookletMode:
      properties:
        rtl:
          type: boolean
          description: >
            <p>Whether or not the reading order of the booklet should be right-to-left.</p>
        sheetMargin:
          type: string
          description: >
            <p>The sheet margin as CSS margin value, for example <code>"1in"</code>, <code>"1cm 1.5cm"</code> or <code>"10mm 20mm 10mm 30mm"</code>. <code><span class='null'>null</span></code> is interpreted as <code>"0mm"</code>.</p>
        sheetSize:
          type: string
          description: >
            <p>The size of the sheet as CSS value, for example <code>"A3"</code>, <code>"letter landscape"</code>, <code>"15in 20in"</code> or <code>"20cm 30cm"</code>.</p>
    Callback:
      properties:
        contentType:
          allOf:
            - $ref: '#/components/schemas/ContentType'
          description: >
            <p>The content type of the payload that is posted.</p>
        interval:
          type: integer
          description: >
            <p>The interval in seconds at which to trigger repeating callbacks.</p> <p>Only applies <code>"PROGRESS"</code>.</p>
        timeout:
          type: integer
          description: >
            <p>An optional timeout for the callback. A value of zero or negative values are treated as an infinite timeout.</p>
        type:
          allOf:
            - $ref: '#/components/schemas/CallbackType'
          description: >
            <p>The event to trigger the callback.</p>
        url:
          type: string
          format: url
          description: >
            <p>The URL to call back.</p>
    ColorSpaceSettings:
      properties:
        cmykIccProfile:
          allOf:
            - $ref: '#/components/schemas/Resource'
          description: >
            <p>Specifies the ICC profile which defines the CMYK color space into or from which CSS colors and images are converted, if <code>conversionEnabled</code>.</p>
        conversionEnabled:
          type: boolean
          description: >
            <p>Enables the conversion of CSS colors and images to the <code>targetColorSpace</code> using the <code>cmykIccProfileUrl</code> or naively if there is none.</p>
        targetColorSpace:
          allOf:
            - $ref: '#/components/schemas/ColorSpace'
          description: >
            <p>Specifies the target color-space of the PDF.</p> <p>This is the color space, CSS keyword based colors are converted to, as well as, if <code>conversionEnabled</code>, other CSS colors and images.</p> <p>It also is the color space for PDF/A and PDF/X documents.</p> <p>Defaults to <code>"RGB RGB"</code>.</p>
    Configuration:
      properties:
        addAttachments:
          type: boolean
          description: >
            <p>Enables or disables attachments specified in style sheets.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        addBookmarks:
          type: boolean
          description: >
            <p>Enables or disables bookmarks in the PDF document.</p> The default value is <code><span class='boolean-false'>false</span></code>.</p>
        addComments:
          type: boolean
          description: >
            <p>Enables or disables comments in the PDF document.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        addLinks:
          type: boolean
          description: >
            <p>Enables or disables links in the PDF document.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        addOverprint:
          type: boolean
          description: >
            <p>Enables or disables overprinting.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        addPreviewImages:
          type: boolean
          description: >
            <p>Enables or disables embedding of image previews per page in the PDF document.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        addTags:
          type: boolean
          description: >
            <p>Enables or disables tagging of the PDF document.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        allowAnnotations:
          type: boolean
          description: >
            <p>Enables or disables the 'annotations' restriction in the PDF document.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        allowAssembly:
          type: boolean
          description: >
            <p>Enables or disables the 'assembly' restriction in the PDF document.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        allowCopy:
          type: boolean
          description: >
            <p>Enables or disables the 'copy' restriction in the PDF document.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        allowDegradedPrinting:
          type: boolean
          description: >
            <p>Enables or disables the 'degraded printing' restriction in the PDF document.<p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        allowFillIn:
          type: boolean
          description: >
            <p>Enables or disables the 'fill in' restriction in the PDF document.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        allowModifyContents:
          type: boolean
          description: >
            <p>Enables or disables the 'modify contents' restriction in the PDF document.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        allowPrinting:
          type: boolean
          description: >
            <p>Enables or disables the 'printing' restriction in the PDF document.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        allowScreenReaders:
          type: boolean
          description: >
            <p>Enables or disables the 'screen readers' restriction in the PDF document.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        appendLog:
          type: boolean
          description: >
            <p>Specifies whether or not the log data should be added to the PDF document.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        attachments:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Attachment'
          description: >
            <p>Adds a file attachment to PDF document.</p>
        authenticationCredentials:
          allOf:
            - $ref: '#/components/schemas/KeyValuePair'
          description: >
            <p>Enables access to resources that are secured via Basic or Digest authentication.</p>
        author:
          type: string
          description: >
            <p>Sets the value of the author field of the PDF document.</p>
        baseURL:
          type: string
          description: >
            <p>Sets the base URL of the document.</p> <p>To resolve relative URLs to absolute URLs a reference (base) URL is required. This reference URL is usually the system id of the document.</p> <p>This method can be used to specify another reference URL. If this URL is not <code><span class='null'>null</span></code> then it will be used instead of the system id.</p> <p>The default value is <code><span class='null'>null</span></code>.</p>
        bookletMode:
          allOf:
            - $ref: '#/components/schemas/BookletMode'
          description: >
            <p>Convenience method to set pages-per-sheet properties and page order in one step to create a booklet.</p>
        callbacks:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Callback'
          description: >
            <p>Adds callbacks to the conversion which will be called at specific times. All callbacks perform a POST request to the specified URL with the specified content type and a certain model which depends on the callback event.<p> <p>For each callback, you can specify a timeout. If no timeout is specified, the server's default timeout for callbacks is used. A value of zero or negative values indicate an infinite timeout, however the PDFreactor server may have a maximum timeout configured, in which case that will be the used value.</p> <p>Some callbacks might be called regularly during the course of a conversion. For these callbacks you can specify an interval to control how frequently they are called.</p>
        cleanupTool:
          allOf:
            - $ref: '#/components/schemas/Cleanup'
          description: >
            <p>Sets the cleanup tool to use for documents with unparsable content.</p> <p>The <em>Cleanup</em> constants can be used as value. The default value specified is <code>"CYBERNEKO"</code>.</p> <p>The cleanup tool is only used for <code>documentType</code> <code>"XHTML"</code>. HTML5 utilizes an internal cleanup.</p>
        colorSpaceSettings:
          allOf:
            - $ref: '#/components/schemas/ColorSpaceSettings'
          description: >
            <p>Specifies color space related settings.</p>
        conformance:
          allOf:
            - $ref: '#/components/schemas/Conformance'
          description: >
            <p>Sets the conformance of the PDF.</p> <p>The <em>Conformance</em> constants can be used as value. The default value specified is <code>"PDF"</code>.</p>
        contentObserver:
          allOf:
            - $ref: '#/components/schemas/ContentObserver'
          description: >
            <p>Specifies parts of the document's content that should be observed and logged in greater detail. Data logged this way can be programmatically retrieved after the conversion has finished. The following can be observed:</p> <ul> <li> <p>Content exceeding boundary containers.</p> <p>Use <em>ExceedingContentAnalyze</em> constants to specify which kind of content should be observed for exceeding content logging. The default value is <code>"NONE"</code>.</p> <p>Use <em>ExceedingContentAgainst</em> constants to specify that exceeding this content starts exceeding content logging. The default value is <code>"NONE"</code>.</p> </li> <li>Resources that could not be loaded.</li> <li>URL connection attempts made by PDFreactor.</li> </ul>
        continuousOutput:
          allOf:
            - $ref: '#/components/schemas/ContinuousOutput'
          description: >
            <p>Enables the conversion of the input document into one image.</p>
        conversionName:
          type: string
          description: >
            <p>Sets a name for the conversion. If a name is set, it will be logged at level "info". The name can be an arbitrary string but should be unique for every conversion or application so that the log output can be matched to a specific conversion or application later.</p>
        cookies:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/KeyValuePair'
          description: >
            <p>Adds a cookie to all outgoing HTTP connections. The parameters are URL encoded (see <code>rawCookies</code>). If the key already exists, the pair is overwritten.</p>
        creator:
          type: string
          description: >
            <p>Sets the value of creator field of the PDF document.</p>
        cssSettings:
          allOf:
            - $ref: '#/components/schemas/CssSettings'
          description: >
            <p> Specifies the behavior of PDFreactor regarding the support and validation of CSS properties and their declaration. The following modes can be set: </p> <ul> <li> Do not validate at all, consider all declared style as valid. See <code>"ALL"</code> </li> <li>Validate all declared styles for properties only supported by PDFreactor. Properties only supported by third party products are not supported/taken as invalid. See <code>"HTML"</code></li> <li>Validate all declared styles for properties supported by PDFreactor. Properties only supported by third party products are supported/taken as valid. See <code>"HTML_THIRD_PARTY"</code></li> <li>All properties supported by third party products are supported/taken as valid. All declared styles for properties not supported by third party products but supported by PDFreactor will be validated. See <code>"HTML_THIRD_PARTY_LENIENT"</code></li> </ul>
        customDocumentProperties:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/KeyValuePair'
          description: >
            <p>Adds a custom property to the PDF document. An existing property of the same name will be replaced.</p>
        debugSettings:
          allOf:
            - $ref: '#/components/schemas/DebugSettings'
          description: >
            <p>Enables and configures debug settings, which add additional information to the output.</p> <p>If enabled, exceptions during the conversion will not be thrown. In such a case, instead of a document a string containing the log and exception will be returned.</p>
        defaultColorSpace:
          allOf:
            - $ref: '#/components/schemas/ColorSpace'
          deprecated: true
          description: >
            <p>Deprecated as of PDFreactor 10. Use <code>colorSpaceSettings</code> and <code>targetColorSpace</code> instead.</p>
        disableFontEmbedding:
          type: boolean
          description: >
            <p>Sets whether fonts will not be embedded into the resulting PDF. Setting this to true will reduce the file size of the output document. However, the resulting PDF documents are no longer guaranteed to look identical on all systems.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        document:
          oneOf:
            - type: string
              format: xml
            - type: string
              format: html
            - type: string
              format: url
          description: >
            <p>The input document. This can either be a URL string, XML or HTML source code string.</p>
        documentDefaultLanguage:
          type: string
          description: >
            <p>Sets the language used for documents having no explicit language attribute set.</p> <p>The language code is used to resolve the lang() selector correct and to determine the correct language used for hyphenation.</p>
        documentType:
          allOf:
            - $ref: '#/components/schemas/Doctype'
          description: >
            <p>Sets the document type.</p> <p>The <em>Doctype</em> constants can be used to specify the document type. The default value specified is <code>"AUTODETECT"</code>. </p>
        enableDebugMode:
          type: boolean
          deprecated: true
          description: >
            <p>Deprecated as of PDFreactor 10. Use <code>debugSettings</code> instead.</p>
        encoding:
          type: string
          description: >
            <p>Sets the encoding of the document.</p> <p>If this value is set to <code><span class='null'>null</span></code> or it is empty then the encoding will be detected automatically.</p> <p>The default value is <code><span class='null'>null</span></code>.</p>
        encryption:
          allOf:
            - $ref: '#/components/schemas/Encryption'
          description: >
            <p>Sets the encryption.</p> <p>Use one of the <em>Encryption</em> constants to specify the encryption. The default value is <code>"NONE"</code>.</p>
        errorPolicies:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/ErrorPolicy'
          description: >
            <p>Specifies error policies that will be used for the conversion. Depending on the policy, the conversion will fail if the appropriate criteria are not met.</p>
        fontAliases:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Font'
          description: >
            <p>Registers an alias font family for an existing font.</p> <p>This function is limited to fonts loaded automatically from system folders.</p>
        fontFallback:
          type: array
          items:
            type: string
          description: >
            <p>Sets a list of fallback font families used for character substitution. This list is iterated for characters that can not be displayed with any of the fonts specified via the CSS property <code>font-family</code>.</p>
        fonts:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Font'
          description: >
            <p>Loads a font from a URL which can be used via the CSS property <code>font-family</code>.</p>
        forceGrayscaleImage:
          type: boolean
          description: >
            <p>If the output format is an image format, this setting controls whether a grayscale image should be returned. This can not be combined with transparency.</p>
        fullCompression:
          type: boolean
          description: >
            <p>Enables or disables full compression of the PDF document.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        httpsMode:
          allOf:
            - $ref: '#/components/schemas/HttpsMode'
          description: >
            <p>Sets the HTTPS mode. In closed environment lenient can be the preferred setting to avoid HTTPS issues that are not security critical</p> <p>The default value specified is <code>"STRICT"</code>.</p>
        ignoreAlpha:
          type: boolean
          description: >
            <p>Sets whether the alpha value of CSS RGBA colors is ignored. This can be used to avoid conformance issues in PDF/A-1.</p>
        integrationStyleSheets:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Resource'
          description: >
            <p>Adds an integration style sheet to the document.</p> <p>There are two ways to specify the style sheet:</p> <ol> <li>Specifying the style sheet only using an URI.</li> <li>Specifying the style sheet by the content of the style sheet and alternatively setting a URI to resolve relative elements. If no URI is specified then the system id/base URL of the document will be used.</li> </ol>
        javaScriptMode:
          allOf:
            - $ref: '#/components/schemas/JavaScriptMode'
          deprecated: true
          description: >
            <p>Deprecated as of PDFreactor 10. Use <code>javaScriptSettings</code> instead.</p>
        javaScriptSettings:
          allOf:
            - $ref: '#/components/schemas/JavaScriptSettings'
          description: >
            <p>Specifies JavaScript related settings.</p>
        keepDocument:
          type: boolean
          description: >
            <p>If set to <code><span class='boolean-true'>true</span></code> prevents the document from being deleted from the PDFreactor Web Service after it has been accessed. This only works for asynchronous conversions.</p>
        keywords:
          type: string
          description: >
            <p>Sets the value of the keywords field of the PDF document.</p>
        licenseKey:
          type: string
          description: >
            <p>Sets the license key using a string. If the license key is set to <code><span class='null'>null</span></code> then PDFreactor looks for a 'licensekey.xml' file in the same directory where the 'PDFreactor.jar' file is located. If no license key could be found then PDFreactor runs in evaluation mode.</p> <p>The default value is <code><span class='null'>null</span></code>.</p>
        logExceedingContent:
          allOf:
            - $ref: '#/components/schemas/LogExceedingContent'
          deprecated: true
          description: >
            <p>Deprecated as of PDFreactor 9. Use <code>contentObserver</code> instead.</p>
        logLevel:
          allOf:
            - $ref: '#/components/schemas/LogLevel'
          description: >
            <p>Sets the log level.</p> <p>Use one of the <em>LogLevel</em> constants to specify the log level.</p> <p>The default value is <code>"NONE"</code>.</p>
        mediaFeatureValues:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/MediaFeatureValue'
          description: >
            <p>Defines the value of a Media Feature which is used to resolve CSS3 media queries.</p>
        mediaTypes:
          type: array
          items:
            type: string
          description: >
            <p>Sets the media types that are used to resolve CSS3 media queries.</p> <p>Please note that this overrides the default media types of PDFreactor, which are: </p> <p><code>"print"</code>, <code>"paged"</code>, <code>"visual"</code>, <code>"bitmap"</code>, <code>"static"</code>, <code>"-ro-pdfreactor"</code></p>
        mergeByteArray:
          type: string
          format: base64
          deprecated: true
          description: >
            <p>Deprecated as of PDFreactor 9. Use <code>mergeDocuments</code> instead.</p>
        mergeByteArrays:
          type: array
          items:
            type: string
          format: base64
          deprecated: true
          description: >
            <p>Deprecated as of PDFreactor 9. Use <code>mergeDocuments</code> instead.</p>
        mergeDocuments:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Resource'
          description: >
            <p>This method sets external PDF documents which will be merged with the PDF document generated by the HTML source.</p>
        mergeMode:
          allOf:
            - $ref: '#/components/schemas/MergeMode'
          description: >
            <p>Sets the merge mode.<p> <p>The following merge methods can be used:</p> <ul> <li>append (<code>"APPEND"</code>)</li> <li>prepend (<code>"PREPEND"</code>)</li> <li>overlay above the content of the generated PDF (<code>"OVERLAY"</code>)</li> <li>overlay below the content of the generated PDF (<code>"OVERLAY_BELOW"</code>)</li> </ul> <p>The default value is <code>"APPEND"</code>.</p>
        mergeURL:
          type: string
          deprecated: true
          description: >
            <p>Deprecated as of PDFreactor 9. Use <code>mergeDocuments</code> instead.</p>
        mergeURLs:
          type: array
          items:
            type: string
          deprecated: true
          description: >
            <p>Deprecated as of PDFreactor 9. Use <code>mergeDocuments</code> instead.</p>
        outputFormat:
          allOf:
            - $ref: '#/components/schemas/OutputFormat'
          description: >
            <p>Sets the <em>OutputFormat</em>. The default value is <code>PDF</code>.</p> <p>For image formats the width or height in pixels must be specified.</p> <p>When either dimension is <1 it is computed based on the other dimension and the aspect ratio of the input document.</p>
        outputIntent:
          allOf:
            - $ref: '#/components/schemas/OutputIntent'
          description: >
            <p>Sets the output intent including the identifier and the ICC profile to be embedded into the PDF.</p> <p>Set either the profile URL or the profile data, not both. Certain PDF/X formats require neither, just a known identifier.</p>
        overlayRepeat:
          allOf:
            - $ref: '#/components/schemas/OverlayRepeat'
          description: >
            <p>If one of the documents of an overlay process is shorter than the other, this method allows repeating either its last page or all of its pages in order to overlay all pages of the longer document.</p> <p>Use one of the <em>OverlayRepeat</em> constants to specify the overlay repeat. The default value is <code>"NONE"</code>.</p>
        ownerPassword:
          type: string
          description: >
            <p>Sets the owner password of the PDF document.</p> <p>The default value is <code><span class='null'>null</span></code>.</p>
        pageOrder:
          oneOf:
            - $ref: '#/components/schemas/PageOrder'
            - type: string
          description: >
            <p>Sets the page order of the direct result of the conversion.</p> <p>If <code>mergeMode</code> is set to <code>"ARRANGE"</code>, this method is also used to specify the position of inserted pages from an existing PDF.</p> <p>A description of the syntax can be found in the manual.</p>
        pagesPerSheetProperties:
          allOf:
            - $ref: '#/components/schemas/PagesPerSheetProperties'
          description: >
            <p>Sets the properties of a sheet on which multiple pages are being arranged.</p> <p>If <code>cols</code> or <code>rows</code> is less than 1, no pages-per-sheet processing is done. This is the case by default. </p> <p>Use one of the <em>PagesPerSheetDirection</em> constants to specify the the direction. The default value is <code>"RIGHT_DOWN"</code>.</p>
        pdfScriptAction:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/PdfScriptAction'
          description: >
            <p>Sets a pair of trigger event and PDF script. The script is triggered on the specified event.</p> <p>A PDF script is JavaScript that is executed by a PDF viewer (e.g. Adobe Reader). Note that most viewers do not support this feature.</p> <p>PDF Scripts can also be set by using the proprietary CSS property <code>pdf-script-action</code>. More information on this property can be found in the manual.</p> <p>Please note, that scripts set via CSS have a higher priority. If two scripts are registered on the same event, but one via API and the other via the CSS property, the script set in the CSS will override the other one.</p>
        pixelsPerInch:
          type: integer
          description: >
            <p>Sets the pixels per inch.</p> <p>Changing this value changes the physical length of sizes specified in px (including those specified via HTML attributes).</p> <p>The default value is <code>96</code> ppi.</p>
        pixelsPerInchShrinkToFit:
          type: boolean
          description: >
            <p>Whether the pixels per inch should be adapted automatically to avoid content exceeding pages.</p>
        postTransformationDocumentType:
          allOf:
            - $ref: '#/components/schemas/Doctype'
          description: >
            <p>Sets the document type after the XSL-Transformations have been applied.</p> <p>The <em>Doctype</em> constants can be used to specify the document type. The default value specified is <code>"AUTODETECT"</code>.</p>
        printDialogPrompt:
          type: boolean
          description: >
            <p>Enables or disables a print dialog to be shown upon opening the generated PDF document by a PDF viewer.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        processingPreferences:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/ProcessingPreferences'
          description: >
            <p>Preferences that influence the conversion process without changing the output.</p> <p>Use the <em>ProcessingPreferences</em> constants to specify the processing preferences. By default no processing preference is set.</p>
        quirksSettings:
          allOf:
            - $ref: '#/components/schemas/QuirksSettings'
          description: >
            <p>Allows to enable or disable behaviors that are otherwise depend on the doctype of the input document.</p>
        rawCookies:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/KeyValuePair'
          description: >
            <p>Adds a cookie to all outgoing HTTP connections. The parameters are not URL encoded (see <code>cookies</code>). If the key already exists, the pair is overwritten.</p>
        requestHeaders:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/KeyValuePair'
          description: >
            <p>Adds a request header to all outgoing HTTP connections. If the key already exists, the pair is overwritten.</p>
        resourceConnectTimeout:
          type: integer
          description: >
            <p>Sets a timeout in milliseconds for connecting to resources, such as HTTP requests to style sheets, images etc. If the connection could not be established until the timeout expires, the request will be aborted and the resource will not be loaded.</p> <p>A timeout of 0 means that the connection will not time out. A negative value means that no timeout will be set. The default value is 60000 (1min).</p>
        resourceReadTimeout:
          type: integer
          description: >
            <p>Sets a timeout in milliseconds for reading resources, such as HTTP requests to style sheets, images etc. If the download does not start until the timeout expires, the request will be aborted and the resource will not be loaded.</p> <p>A timeout of 0 means that the download will not time out. A negative value means that no timeout will be set. The default value is 60000 (1min).</p>
        resourceRequestTimeout:
          type: integer
          deprecated: true
          description: >
            <p>Deprecated as of PDFreactor 10. Use <code>resourceConnectTimeout</code> and <code>resourceReadTimeout</code> instead.</p>
        segmentationSettings:
          allOf:
            - $ref: '#/components/schemas/SegmentationSettings'
          description: >
            <p>This property configures segmentation of the conversion, which helps with very large documents.</p>
        signPDF:
          allOf:
            - $ref: '#/components/schemas/SignPDF'
          description: >
            <p>Sets a digital certificate to sign the newly created PDF.</p> <p>Requires a keystore file. The included certificate may be self-signed.</p> <p>Use the <em>KeystoreType</em> constants to specify the keystore type.</p> <p>Use the <em>SigningMode</em> constants to specify the cryptographic filter that is used for signing.</p>
        subject:
          type: string
          description: >
            <p>Sets the value of the subject field of the PDF document.</p>
        throwLicenseExceptions:
          type: boolean
          deprecated: true
          description: >
            <p>Deprecated as of PDFreactor 9. Use <code>errorPolicies</code> instead.</p>
        title:
          type: string
          description: >
            <p>Sets the value of the title field of the PDF document.</p>
        userPassword:
          type: string
          description: >
            <p>Sets the user password of the PDF document.</p> <p>The default value is <code><span class='null'>null</span></code>.</p>
        userScripts:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Resource'
          description: >
            <p>Adds an user script to the document.</p> <p>There are two ways to specify the script:</p> <ol> <li>Specifying the script only by an URI.</li> <li>Specifying the script by the content of the script and alternatively setting a URI to resolve relative elements. If no URI is specified then the system id/base URL of the document will be used.</li> </ol>
        userStyleSheets:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Resource'
          description: >
            <p>Adds a user style sheet to the document.</p> <p>There are two ways to specify the style sheet:</p> <ol> <li>Specifying the style sheet only using an URI.</li> <li>Specifying the style sheet by the content of the style sheet and alternatively setting a URI to resolve relative elements. If no URI is specified then the system id/base URL of the document will be used.</li> </ol>
        validateConformance:
          type: boolean
          description: >
            <p>Enables PDFreactor to validate the generated PDF against the <em>Conformance</em> specified via <code>conformance</code>.</p> <p>Currently only PDF/A validation is supported.</p> <p>Please note that validation might take several minutes for larger documents.</p>
        viewerPreferences:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/ViewerPreferences'
          description: >
            <p>Sets the page layout and page mode preferences of the PDF.</p> <p>Use the <em>ViewerPreferences</em> constants to specify the viewer preferences. By default no viewer preference is set.</p>
        xmp:
          allOf:
            - $ref: '#/components/schemas/Xmp'
          description: >
            <p>Sets custom XMP to be embedded into the PDF document.</p> <p>If both <code>content</code> and <code>uri</code> are not set or <code><span class='null'>null</span></code> no custom XMP is embedded. If <em>XmpPriority</em> is also set to <code>"HIGH"</code> automatic generation of required XMP is also suppressed. <i>This may cause output PDFs to not archive a specified conformance.</i>
        xsltMode:
          type: boolean
          description: >
            <p>Enables or disables XSLT transformations.</p> <p>Set this value to <code><span class='boolean-true'>true</span></code> to enable XSLT transformations or to <code><span class='boolean-false'>false</span></code> to disable XSLT transformations.</p> <p>The default value is <code><span class='boolean-false'>false</span></code>.</p>
        xsltStyleSheets:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Resource'
          description: >
            <p>Adds an XSLT style sheet to the document.</p> <p>There are two ways to specify the style sheet:</p> <ol> <li>Specifying the style sheet only by an URI.</li> <li>Specifying the style sheet by the content of the style sheet and alternatively setting a URI to resolve relative elements. If no URI is specified then the system id/base URL of the document will be used. </li> </ol>
      required:
        - document
    Connection:
      properties:
        cached:
          type: boolean
          description: >
            <p>Whether the response was retrieved from a cache.</p>
        connected:
          type: boolean
          description: >
            <p>Whether a URL connection could be established by PDFreactor. If this is <code><span class='boolean-false'>false</span></code>, see <code>error</code> for details.</p>
        duration:
          type: integer
          description: >
            <p>The duration in milliseconds how long this connection remained open.</p>
        error:
          type: string
          description: >
            <p>The error message if the connection could not be established.</p>
        method:
          type: string
          description: >
            <p>The request method used by the underlying HTTP request (like "GET", "POST", etc.) or <code><span class='null'>null</span></code> if this is not an HTTP connection or the connection could not be established.</p>
        protocol:
          type: string
          description: >
            <p>The protocol of the URL connection.</p>
        requestHeaders:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/KeyValuePair'
          description: >
            <p>The request headers.</p> <p>Note: If a header has multiple values, there will be one <em>KeyValuePair</em> for each value with the header name as key.</p>
        responseHeaders:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/KeyValuePair'
          description: >
            <p>The response headers.</p> <p>Note: If a header has multiple values, there will be one <em>KeyValuePair</em> for each value with the header name as key.</p>
        statusCode:
          type: integer
          description: >
            <p>The response code for HTTP connections or 0 for all other connections.</p>
        statusMessage:
          type: string
          description: >
            <p>The response message for the response code or <code><span class='null'>null</span></code> if the response code is 0 or the message could not be determined.</p>
        timestamp:
          type: integer
          description: >
            <p>The time stamp of this connection.</p>
        url:
          type: string
          format: url
          description: >
            <p>The URL.</p>
    ConnectionSettings:
      properties:
        cookies:
          type: array
          items:
            type: string
          description: >
            A collection of name-value-pairs representing the cookies that will be added to the HTTP request to the PDFreactor Web Service. This property is empty by default and additional cookies can be added as required. Cookies should only be added in special environments where it is necessary, e.g. when using a load balancer. If the PDFreactor Web Service's response contains any cookies, they will be added to this property, potentially overwriting cookies with the same name.
        headers:
          type: array
          items:
            type: string
          description: >
            A collection of name-value-pairs representing the request headers that will be added to the HTTP request to the PDFreactor Web Service. This property is empty by default and additional headers can be added as required. Headers should only be added in special environments where it is necessary.
    ContentObserver:
      properties:
        connections:
          type: boolean
          description: >
            <p>Enables observation of URL connections done by PDFreactor.</p>
        exceedingContentAgainst:
          allOf:
            - $ref: '#/components/schemas/ExceedingContentAgainst'
          description: >
            <p>Enables observation of exceeding content either against the page edges, page content areas or containers.</p>
        exceedingContentAnalyze:
          allOf:
            - $ref: '#/components/schemas/ExceedingContentAnalyze'
          description: >
            <p>Enables observation of exceeding content and optionally of boxes.</p>
        missingResources:
          type: boolean
          description: >
            <p>Enables observation of resources that could not be loaded.</p>
    ContinuousOutput:
      properties:
        height:
          type: integer
          description: >
            <p>Equivalent to the height of a browser window (view port). For values <1 the entire height of the document is used.</p>
        width:
          type: integer
          description: >
            <p>Equivalent to the width of a browser window (view port). Values <1 enable paginated output.</p>
    CssSettings:
      properties:
        supportQueryMode:
          allOf:
            - $ref: '#/components/schemas/CssPropertySupport'
          description: >
            <p>Adjusts the CSS property support behavior.</p>
        validationMode:
          allOf:
            - $ref: '#/components/schemas/CssPropertySupport'
          description: >
            <p>Adjusts the CSS property validation behavior.</p>
    DebugSettings:
      properties:
        all:
          type: boolean
          description: >
            <p>This is a convenience property that enables the following <em>DebugSettings</em>:</p> <ul> <li><code>attachDocuments</code>,</li> <li><code>attachResources</code>,</li> <li><code>attachLogs</code>,</li> <li><code>appendLogs</code>,</li> <li><code>forceResult</code></li> </ul>
        appendLogs:
          type: boolean
          description: >
            <p>Specifies whether the logs will be appended to the resulting PDF.</p>
        attachDocuments:
          type: boolean
          description: >
            <p>Specifies whether all debug files belonging to the group "documents" will be attached to the generated PDF. Please see the manual for more information.</p>
        attachLogs:
          type: boolean
          description: >
            <p>Specifies whether all debug files belonging to the group "logs" will be attached to the generated PDF. Please see the manual for more information.</p>
        attachResources:
          type: boolean
          description: >
            <p>Specifies whether all debug files belonging to the group "resources" will be attached to the generated PDF. Please see the manual for more information.</p>
        forceResult:
          type: boolean
          description: >
            <p>Forces PDFreactor to return a result, regardless of any exceptions or errors that may have occurred during the conversion.</p> <p>If an exception or error occurred during the conversion, its stack trace and the PDFreactor log is written as-is into the result data stream. This means that the resulting document will not be a valid PDF but can be opened with an appropriate text editor to view the log and errors.</p>
    ExceedingContent:
      properties:
        bottom:
          type: boolean
          description: >
            <p>Returns whether the content exceeds the page at the bottom.</p>
        box:
          type: boolean
          description: >
            <p>Returns whether the exceeding content is a box instead of text or image content.</p>
        containerBottom:
          type: integer
          description: >
            <p>Returns the bottom coordinate of the the container box in the page in pixels. Depending on the settings this box may be the page.</p>
        containerLeft:
          type: integer
          description: >
            <p>Returns the left coordinate of the the container box in the page in pixels. Depending on the settings this box may be the page.</p>
        containerRight:
          type: integer
          description: >
            <p>Returns the right coordinate of the the container box in the page in pixels. Depending on the settings this box may be the page.</p>
        containerTop:
          type: integer
          description: >
            <p>Returns the top coordinate of the the container box in the page in pixels. Depending on the settings this box may be the page.</p>
        description:
          type: string
          description: >
            <p>Returns a description of the content. In case of text content, the text is returned. In case of images the URL is returned if available.</p>
        exceedingBoxBottom:
          type: integer
          description: >
            <p>Returns the bottom coordinate of the the exceeding box in the page in pixels.</p>
        exceedingBoxLeft:
          type: integer
          description: >
            <p>Returns the left coordinate of the the exceeding box in the page in pixels.</p>
        exceedingBoxRight:
          type: integer
          description: >
            <p>Returns the right coordinate of the the exceeding box in the page in pixels.</p>
        exceedingBoxTop:
          type: integer
          description: >
            <p>Returns the top coordinate of the the exceeding box in the page in pixels.</p>
        html:
          type: string
          description: >
            <p>Returns the HTML of the box that contains the exceeding content.</p>
        left:
          type: boolean
          description: >
            <p>Returns whether the content exceeds the page to the left.</p>
        pageBottom:
          type: integer
          description: >
            <p>Returns the bottom coordinate of the the page in pixels.</p>
        pageLeft:
          type: integer
          description: >
            <p>Returns the left coordinate of the the page in pixels.</p>
        pageNumber:
          type: integer
          description: >
            <p>Returns the number of the page that contains the exceeding content.</p>
        pageRight:
          type: integer
          description: >
            <p>Returns the right coordinate of the the page in pixels.</p>
        pageTop:
          type: integer
          description: >
            <p>Returns the top coordinate of the the page in pixels.</p>
        path:
          type: array
          items:
            type: integer
          description: >
            <p>Returns an array of integers denoting the indexes of the ancestors of the DOM node corresponding to the box containing the exceeding content, starting from below the root node down to the element itself.</p>
        right:
          type: boolean
          description: >
            <p>Returns whether the content exceeds the page to the right.</p>
        summary:
          type: string
          description: >
            <p>Returns a summary of this exceeding content object.</p>
        top:
          type: boolean
          description: >
            <p>Returns whether the content exceeds the page at the top.</p>
    Font:
      properties:
        bold:
          type: boolean
          description: >
            <p>Whether the alias will be labeled bold.</p>
        family:
          type: string
          description: >
            <p>The alias name for that font.</p>
        italic:
          type: boolean
          description: >
            <p>Whether the alias will be labeled italic.</p>
        source:
          type: string
          description: >
            <p>The source URL of the font (when adding new fonts) or the name of an existing font family (when creating an alias).</p>
    JavaScriptSettings:
      properties:
        debugIndentation:
          type: integer
          description: >
            <p>Specifies the amount of spaces per indentation level when using JavaScript debugging.</p> <p>The default value is 0.</p>
        debugMode:
          allOf:
            - $ref: '#/components/schemas/JavaScriptDebugMode'
          description: >
            <p>Specifies the debug mode.</p> <p>Any other value than the default <code>"NONE"</code> impacts performance significantly and should not be used in production.</p>
        enabled:
          type: boolean
          description: >
            <p>Specifies whether to process JavaScript.</p>
        ignoreScriptElements:
          type: boolean
          description: >
            <p>Specifies whether to ignore <script> elements in the document, only executing user scripts.</p>
        maxQueuedTasks:
          type: integer
          description: >
            <p>Specifies the maximum amount of tasks to be queued before ending JavaScript processing.</p> <p>Values smaller than 1 default to 1,000,000.</p>
        maxScriptElements:
          type: integer
          description: >
            <p>Specifies the maximum amount of script elements in the document to process.</p> <p>Values smaller than 1 default to 1,000,000.</p>
        maxTasksWithoutDomChange:
          type: integer
          description: >
            <p>Specifies the maximum amount of tasks to be allowed to be queued, while the DOM does not change, before ending JavaScript processing.</p> <p>Values smaller than 1 default to 1,000.</p>
        maxVirtualTimeOffset:
          type: integer
          description: >
            <p>Specifies the maximum amount of virtual time in seconds to let pass before ending JavaScript processing.</p> <p>Values smaller than 1 default to 3600 (1h).</p>
        noLayout:
          type: boolean
          description: >
            <p>Specifies whether to process JavaScript without causing document layouts or updates.</p> <p>This can speed up conversions, but will break a significant amount of functionality and libraries.</p>
        noVirtualTime:
          type: boolean
          description: >
            <p>Specifies whether not to use virtual time for JavaScript.</p> <p>Only use if required for a specific library.</p>
        timeLapse:
          type: boolean
          description: >
            <p>Specifies whether to fast-forward the virtual time of JavaScript every time it is retrieved.</p> <p>Only use if required for a specific library.</p>
    KeyValuePair:
      properties:
        key:
          type: string
          description: >
            <p>The key.</p>
        value:
          type: string
          description: >
            <p>The value.</p>
    Log:
      properties:
        records:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Record'
          description: >
            The log records of the main PDFreactor log.
        recordsCss:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Record'
          description: >
            The log records of the PDFreactor CSS log.
        recordsJavaScript:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Record'
          description: >
            The log records of the PDFreactor JavaScript log.
    LogExceedingContent:
      properties:
        logExceedingContentAgainst:
          allOf:
            - $ref: '#/components/schemas/ExceedingContentAgainst'
          description: >
            <p>Enables logging of exceeding content either against the page edges, page content areas or containers.</p>
        logExceedingContentAnalyze:
          allOf:
            - $ref: '#/components/schemas/ExceedingContentAnalyze'
          description: >
            <p>Enables logging of exceeding content and optionally of boxes.</p>
    MediaFeatureValue:
      properties:
        mediaFeature:
          allOf:
            - $ref: '#/components/schemas/MediaFeature'
          description: >
            <p>The media feature.</p>
        value:
          type: string
          description: >
            <p>The value that is associated with the given media feature.</p>
    MissingResource:
      properties:
        message:
          type: string
          description: >
            <p>The message indicating why the resource could not be found.</p>
        resource:
          type: string
          description: >
            <p>The resource identifier. Usually a URL string.</p>
        type:
          allOf:
            - $ref: '#/components/schemas/ResourceType'
          description: >
            <p>The type of resource (style sheet, image, etc.).</p>
    OutputFormat:
      properties:
        height:
          type: integer
          description: >
            <p>The height of the output in pixels (image formats only). Values <1 will be computed based on the specified width and the aspect ratio of the input document.</p>
        multiImage:
          type: boolean
          description: >
            <p>Indicates whether the image output will be paginated into multiple images.</p>
        type:
          allOf:
            - $ref: '#/components/schemas/OutputType'
          description: >
            <p>The output format. See <em>OutputType</em> constants.</p>
        width:
          type: integer
          description: >
            <p>The with of the output in pixels (image formats only). Values <1 will be computed based on the specified height and the aspect ratio of the input document.</p>
    OutputIntent:
      properties:
        data:
          type: string
          format: base64
          description: >
            <p>The profile data.</p>
        identifier:
          oneOf:
            - $ref: '#/components/schemas/OutputIntentDefaultProfile'
            - type: string
          description: >
            <p>The identifier.</p>
        url:
          type: string
          format: url
          description: >
            <p>The profile URL.</p>
    PagesPerSheetProperties:
      properties:
        cols:
          type: integer
          description: >
            <p>The number of columns per sheet.</p>
        direction:
          allOf:
            - $ref: '#/components/schemas/PagesPerSheetDirection'
          description: >
            <p>The direction in which the pages are ordered on a sheet.</p>
        rows:
          type: integer
          description: >
            <p>The number of rows per sheet.</p>
        sheetMargin:
          type: string
          description: >
            <p>The sheet margin as CSS margin, for example <code>"1in"</code>, <code>"1cm 1.5cm"</code> or <code>"10mm 20mm 10mm 30mm"</code>. <code><span class='null'>null</span></code> is interpreted as <code>"0mm"</code>.</p>
        sheetSize:
          type: string
          description: >
            <p>The sheet size as CSS size, for example <code>"A4"</code>, <code>"letter landscape"</code>, <code>"15in 20in"</code> or <code>"20cm 30cm"</code>.</p>
        spacing:
          type: string
          description: >
            <p>The horizontal and vertical space between pages on a sheet as CSS value, for example <code>"0.1in"</code> or <code>"5mm 2mm"</code>. <code><span class='null'>null</span></code> is interpreted as <code>"0mm"</code>.</p>
    PdfScriptAction:
      properties:
        script:
          type: string
          description: >
            <p>The script source that should be executed.</p>
        triggerEvent:
          allOf:
            - $ref: '#/components/schemas/PdfScriptTriggerEvent'
          description: >
            <p>The event on which the script is executed. Value is a <em>PdfScriptTriggerEvent</em> constant.</p>
    Progress:
      properties:
        callbackUrl:
          type: string
          description: >
            If this object was created for a callback, this property indicates the callback's URL.
        contentType:
          type: string
          description: >
            The content type of the resulting document as a MIME type string. Depends on what <em>OutputType</em> was set in the <em>Configuration</em>. If none was set, the content type defaults to "application/pdf".
        conversionName:
          type: string
          description: >
            Returns the name of the conversion if it was specified via <code>conversionName</code>.
        documentId:
          type: string
          description: >
            The document ID of the conversion. This ID can be used to poll the progress or retrieve the result.
        documentUrl:
          type: string
          description: >
            The relative URL to the location where you can download the generated document once it is finished.
        finished:
          type: boolean
          description: >
            Indicates whether the conversion is finished yet.
        log:
          allOf:
            - $ref: '#/components/schemas/Log'
          description: >
            The log of the conversion.
        progress:
          type: integer
          description: >
            The current progress of the conversion. The value is between 0 and 100.
        startDate:
          type: string
          format: date-time
          description: >
            The date and time when the conversion was started on the server.
    QuirksSettings:
      properties:
        caseSensitiveClassSelectors:
          allOf:
            - $ref: '#/components/schemas/QuirksMode'
          description: >
            <p>By default in HTML CSS class selectors are case sensitive.</p> <p>In the default <code>"DETECT"</code> mode this behavior is disabled for old HTML doctypes or when there is no doctype.</p> <p>To enable or disable it independently of the document this property can be set to <code>"STANDARDS"</code> or <code>"QUIRKS"</code> respectively.</p>
        minLineHeightFromContainer:
          allOf:
            - $ref: '#/components/schemas/QuirksMode'
          description: >
            <p>By default the line-height of text containers, e.g. paragraph elements, is used as the minimum line-height of their lines.</p> <p>In the default <code>"DETECT"</code> mode this behavior is disabled for old HTML doctypes or when there is no doctype.</p> <p>To enable or disable it independently of the document this property can be set to <code>"STANDARDS"</code> or <code>"QUIRKS"</code> respectively.</p>
    Record:
      properties:
        level:
          type: integer
          description: >
            The level of the record.
        levelName:
          type: string
          description: >
            The textual representation of the level.
        message:
          type: string
          description: >
            The logged message.
        timestamp:
          type: integer
          description: >
            The timestamp.
    Resource:
      properties:
        beforeDocumentScripts:
          type: boolean
          description: >
            <p>Use <code><span class='boolean-true'>true</span></code> to cause PDFreactor to run the script before all scripts inside the document and <code><span class='boolean-false'>false</span></code> to run it after.</p> <p>Only supported for JavaScript-type resources.</p>
        content:
          type: string
          description: >
            <p>The content of the resource. Only supported for Style Sheet- and Script-type resources.</p>
        data:
          type: string
          format: base64
          description: >
            <p>The binary data of the resource.</p>
        uri:
          type: string
          format: url
          description: >
            <p>The URI of the resource.</p>
    Result:
      properties:
        callbackUrl:
          type: string
          description: >
            If this object was created for a callback, this property indicates the callback's URL.
        connections:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Connection'
          description: >
            <p>Provides a log about all URL connections attempted by PDFreactor, including information about HTTP request and result, should the connection be an HTTP or HTTPS connection. Depends on the mode set via <code>contentObserver</code>.</p>
        contentType:
          type: string
          description: >
            The content type of the resulting document as a MIME type string. Depends on what <em>OutputType</em> was set in the <em>Configuration</em>. If none was set, the content type defaults to "application/pdf".
        conversionName:
          type: string
          description: >
            Returns the name of the conversion if it was specified via <code>conversionName</code>.
        document:
          type: string
          format: base64
          description: >
            <p>The resulting PDF or image.</p> <p>This is not present if only the document's metadata was retrieved.</p>
        documentArray:
          type: array
          items:
            type: string
          format: base64
          description: >
            <p>The resulting image as a collection of separate images, each representing a single page. This property is only present if the configuration option "multiImage" was set to <code><span class='boolean-true'>true</span></code>.</p> <p>This is also not present if only the document's metadata was retrieved.</p>
        documentId:
          type: string
          description: >
            The document ID of the conversion. This ID can be used to poll the progress or retrieve the result.
        documentUrl:
          type: string
          description: >
            The relative URL to the location where you can download the generated document once it is finished.
        endDate:
          type: string
          format: date-time
          description: >
            <p>The date and time when the conversion was finished on the server.</p>
        error:
          type: string
          description: >
            <p>Returns the error messages that might have been generated during rendering.</p>
        exceedingContents:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/ExceedingContent'
          description: >
            <p>Provides information about content exceeding its page or parent. Depends on the mode set via "logExceedingContents".</p>
        javaScriptExports:
          type: string
          description: >
            <p>Returns data that has been exported from document JavaScript via <code>ro.exports</code> if set, <code><span class='null'>null</span></code> otherwise. If the JavaScript data is not a string, it will be converted to JSON. If the data can't be converted, a generic string representation is used or <code><span class='null'>null</span></code> if none is available.</p>
        keepDocument:
          type: boolean
          description: >
            <p>Indicates whether or not the <code>keepDocument</code> property was set in the <code>Configuration</code> of this conversion. If <code><span class='boolean-true'>true</span></code>, additional requests can be made to retrieve this document.</p>
        log:
          allOf:
            - $ref: '#/components/schemas/Log'
          description: >
            <p>Returns the log messages generated during rendering based on the log level.</p>
        missingResources:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/MissingResource'
          description: >
            <p>Provides information about resources that could not be loaded during the conversion. Depends on the mode set via <code>contentObserver</code>.</p>
        numberOfPages:
          type: integer
          description: >
            <p>Returns the number of pages of the document after conversion.</p>
        numberOfPagesLiteral:
          type: integer
          description: >
            <p>Returns the number of pages of the resulting PDF (including, e.g., merge operations), otherwise it will return the number pages of the laid out input document.</p>
        startDate:
          type: string
          format: date-time
          description: >
            The date and time when the conversion was started on the server.
    ScriptResource:
      properties:
        beforeDocumentScripts:
          type: boolean
          description: >
            <p>Use <code><span class='boolean-true'>true</span></code> to cause PDFreactor to run the script before all scripts inside the document and <code><span class='boolean-false'>false</span></code> to run it after.</p> <p>Only supported for JavaScript-type resources.</p>
        content:
          type: string
          description: >
            <p>The content of the resource. Only supported for Style Sheet- and Script-type resources.</p>
        data:
          type: string
          format: base64
          description: >
            <p>The binary data of the resource.</p>
        uri:
          type: string
          format: url
          description: >
            <p>The URI of the resource.</p>
    SegmentationSettings:
      properties:
        enabled:
          type: boolean
          description: >
            <p>Enables or disables segmentation.</p>
        segmentSize:
          type: integer
          description: >
            <p>The preferred size (in number of pages) of the segments into which the conversion will be split.</p> <p>Valid values range from 10 to 1000. Values smaller than 1 default to 1000.</p>
    SignPDF:
      properties:
        keyAlias:
          type: string
          description: >
            <p>The alias of the certificate included in the keystore to be used to sign the PDF.</p>
        keyPassword:
          type: string
          description: >
            <p>The password for the certificate included in the keystore to be used to sign the PDF.</p> <p>If none is provided, the keystore password will be used for the certificate.</p>
        keystorePassword:
          type: string
          description: >
            <p>The password of the keystore.</p>
        keystoreType:
          allOf:
            - $ref: '#/components/schemas/KeystoreType'
          description: >
            <p>The format of the keystore, for example PKCS #12 or JKS. Use one of the <em>KeystoreType</em> constants as value.</p>
        keystoreURL:
          type: string
          description: >
            <p>The URL to the keystore file.</p>
        signingMode:
          allOf:
            - $ref: '#/components/schemas/SigningMode'
          description: >
            <p>The cryptographic filter mode that is used to sign the PDF, like SELF_SIGNED, VERISIGN_SIGNED or WINCER_SIGNED.</p> <p>Use one of the <em>SigningMode</em> constants as value.</p>
    Version:
      properties:
        build:
          type: integer
          description: >
            The build number.
        label:
          type: string
          description: >
            The label of the version.
        major:
          type: integer
          description: >
            The major version.
        micro:
          type: integer
          description: >
            The micro version.
        minor:
          type: integer
          description: >
            The minor version.
        revision:
          type: string
          description: >
            The revision number.
    Xmp:
      properties:
        content:
          type: string
          description: >
            <p>XMP, as an XML string, to be embedded into the PDF document.</p>
        priority:
          allOf:
            - $ref: '#/components/schemas/XmpPriority'
          description: >
            <p>Priority of this XMP over XMP generated automatically for the conformance requirements of certain output formats.</p>
        uri:
          type: string
          format: url
          description: >
            <p>URI to XMP to be embedded into the PDF document, if <code>content</code> is not set or <code><span class='null'>null</span></code>.</p>
